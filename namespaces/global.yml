namespace: Global
version: 1.0.0
status: registered
liveat: https://github.com/taophp/markscribe/namespaces/global.yml
application:
  name: MarkScribe
  url: https://github.com/taophp/markscribe
publisher:
  name: PixyBlue
  url: https://pixyblue.com
maintainer:
  name: St√©phane Mourey
  contact: mail@stephanemourey.fr
documentation: https://github.com/taophp/markscribe#244-standard-modifiers
modifiers:
  - name: Type
    description: Defines the fundamental nature of an entity
    scope: global
    parameters:
      - name: type
        type: string
        description: Entity type identifier
        values: [character, place, time, event, object, organization]
    examples:
      - code: "@@Jules.Type(character)"
        description: "Defines Jules as a character entity"
    notes: |
      Core type definition affects how tools process and analyze the entity.
      Sugar syntax available for common types (.Character, .Place, etc.)

  - name: Character
    description: Sugar syntax for Type(character)
    scope: global
    examples:
      - code: "@@Jules.Character"
        description: "Equivalent to @@Jules.Type(character)"

  - name: Place
    description: Sugar syntax for Place(place)
    scope: global
    examples:
      - code: "@@Paris.Place"
        description: "Equivalent to @@Paris.Type(Place)"

  - name: Event
    description: Sugar syntax for Event(event)
    scope: global
    examples:
      - code: "@@Christmas.Event"
        description: "Equivalent to @@Christmas.Type(Event)"

  - name: Object
    description: Sugar syntax for Type(object)
    scope: global
    examples:
      - code: "@@Sword.Object"
        description: "Equivalent to @@Sword.Type(object)"

  - name: Note
    description: Attaches a local note to an entity
    scope: local
    parameters:
      - name: content
        type: string
        description: Note content to attach to the entity
    examples:
      - code: "@@Marie.Note(25 years old)"
        description: "Equivalent to @@Marie(25 years old)"
    notes: |
      Used for context-specific information about an entity.
      Sugar syntax: @@Entity(content)

  - name: Gnote
    description: Attaches a global note to an entity
    scope: global
    parameters:
      - name: content
        type: string
        description: Note content to attach globally to the entity
    examples:
      - code: "@@Marie.Gnote(red hair)"
        description: "Equivalent to @@Marie_(red hair)"
    notes: |
      Used for information that applies to all occurrences of an entity.
      Sugar syntax: @@Entity_(content)

  - name: Geo
    description: Associates geographic coordinates with an entity (usually a place)
    scope: global
    parameters:
      - name: latitude
        type: number
        description: Latitude in decimal degrees (WGS84)
      - name: longitude
        type: number
        description: Longitude in decimal degrees (WGS84)
    examples:
      - code: "@@Paris.Geo(48.8566, 2.3522)"
        description: "Associates Paris with its GPS coordinates"
    notes: |
      This modifier is primarily intended for use by editors or tools, not for manual entry.
      It enables map visualizations and spatial queries.

  - name: Pov
    description: Indicates point-of-view narrative sections
    scope: local
    examples:
      - code: "@@Jules.Pov[looked around the room]"
        description: "Marks text as being from Jules' perspective"
    notes: |
      Affects narrative analysis and style checking.
      Can be made global with ! modifier.

  - name: Status
    description: Marks status content of section or a file
    scope: local
    parameters:
      - name: status
        type: string
        description: Status value (e.g. draft, final)
    examples:
      - code: "@@.Status(draft)"
        description: "Marks following content as draft"
    notes: |
      Commonly used with null entity (@@.) for section marking

  - name: Draft
    description: Sugar syntax for Status(draft)
    scope: local
    examples:
      - code: "@@.Draft"
        description: "Equivlent to @@.Status(draft)"

  - name: Final
    description: Sugar syntax for Status(final)
    scope: local
    examples:
      - code: "@@.Final"
        description: "Equivlent to @@.Status(final)"

  - name: Todo
    description: Indicates something to be done
    scope: local
    parameters:
      - name: task
        type: string
        description: Description of the task to be done
    examples:
      - code: "@@.Todo(Something to do)"
        description: "Indicates something to be done"
    notes: |
      Commonly used with null entity (@@.) for section marking

  - name: Version
    description: Indicates version information for document or section
    scope: local
    parameters:
      - name: version
        type: string
        description: Version identifier
    examples:
      - code: "@@.Version(1.2)"
        description: "Marks section as version 1.2"
    notes: |
      Used for version control and document management

  - name: Hidden
    description: Marks an entity as invisible in the final text (all references, even canonical, are hidden)
    scope: global
    examples:
      - code: "@@JDS.Hidden.name(John Doe Smith)"
        description: "Marks JDS as an invisible entity; all references to JDS are hidden in output"
    notes: |
      Useful for annotating meta-entities (authors, reviewers, etc.) that should never appear in the output.
      This modifier does not accept parameters.

  - name: Alias
    description: Defines an alternative name (alias) for an entity. When the alias appears in the text, even without the @@ marker, it is recognized as a reference to the canonical entity.
    scope: global
    parameters:
      - name: alias
        type: string
        description: Alternative name to be recognized as the entity
    examples:
      - code: "@@(Sherlock_Holmes).Alias[Holmes] looked at @@(John_Watson).Alias[Watson]."
        description: "Defines 'Holmes' as an alias for 'Sherlock_Holmes' and 'Watson' as an alias for 'John_Watson'. Any occurrence of 'Holmes' or 'Watson' in the text will be treated as a reference to their respective canonical entities."
    notes: |
      Multiple aliases can be defined for the same entity; all are cumulative. Aliases are recognized throughout the text, enabling flexible referencing and disambiguation.

  - name: Fix
    description: Proposes a simple correction (spelling, grammar, typo)
    scope: local
    parameters:
      - name: original
        type: string
        description: Original text (visible parameter, optional)
      - name: correction
        type: string
        description: Correction (hidden parameter, optional)
    examples:
      - code: "The child@@JDS.Fix[x](s) walk@@JDS.Fix[](ed) to school."
        description: "Proposes to replace 'x' by 's' and add 'ed'; output: 'The childs walked to school.'"
    notes: |
      All parameters are optional. Use only the hidden parameter to suggest an addition, only the visible parameter to suggest a deletion, or both for a replacement.

  - name: Suggest
    description: Suggests a reformulation or alternative phrasing
    scope: local
    parameters:
      - name: original
        type: string
        description: Original text (visible parameter, optional)
      - name: suggestion
        type: string
        description: Suggested text (hidden parameter, optional)
    examples:
      - code: "Sherlock JDS.Suggest[put his foot in it](was clumsy)."
        description: "Suggests to replace 'put his foot in it' with 'was clumsy'; output: 'Sherlock was clumsy.'"
    notes: |
      All parameters are optional. Use only the hidden parameter to suggest an addition, only the visible parameter to suggest a deletion, or both for a replacement.

  - name: Comment
    description: Adds an editorial comment (hidden in output)
    scope: local
    parameters:
      - name: fragment
        type: string
        description: Fragment being commented (visible parameter, optional)
      - name: comment
        type: string
        description: Comment text (hidden parameter, required)
    examples:
      - code: "Sherlock JDS.Comment[put his foot in it](awkward phrasing)."
        description: "Adds an editorial comment on the fragment; output: 'Sherlock put his foot in it.'"
      - code: "Sherlock JDS.Comment[](awkward phrasing)."
        description: "Adds an editorial comment at this position; output: 'Sherlock.'"
    notes: |
      The visible parameter is optional; the comment (hidden parameter) is required. The comment never appears in the output.

  - name: ChildOf
    description: Declares that the current entity is the child, member, or part of the specified entity (hierarchical/arborescent relation)
    scope: global
    examples:
      - code: "@@Paris.ChildOf(@@France)"
        description: "Paris is a child (part/member) of France"

  - name: ParentOf
    description: Declares that the current entity is the parent, group, or container of the specified entity (inverse hierarchical relation)
    scope: global
    examples:
      - code: "@@France.ParentOf(@@Paris)"
        description: "France is the parent (container/group) of Paris"

  - name: PartOf
    description: Sugar syntax for ChildOf
    scope: global
    examples:
      - code: "@@Paris.PartOf(@@France)"
        description: "Equivalent to @@Paris.ChildOf(@@France)"

  - name: HasPart
    description: Sugar syntax for ParentOf
    scope: global
    examples:
      - code: "@@France.HasPart(@@Paris)"
        description: "Equivalent to @@France.ParentOf(@@Paris)"

  - name: BelongsTo
    description: Sugar syntax for ChildOf
    scope: global
    examples:
      - code: "@@Paris.BelongsTo(@@France)"
        description: "Equivalent to @@Paris.ChildOf(@@France)"

  - name: Includes
    description: Sugar syntax for ParentOf
    scope: global
    examples:
      - code: "@@France.Includes(@@Paris)"
        description: "Equivalent to @@France.ParentOf(@@Paris)"

  - name: MemberOf
    description: Sugar syntax for ChildOf
    scope: global
    examples:
      - code: "@@Alice.MemberOf(@@Famille_Dupont)"
        description: "Equivalent to @@Alice.ChildOf(@@Famille_Dupont)"

  - name: GroupOf
    description: Sugar syntax for ParentOf
    scope: global
    examples:
      - code: "@@Famille_Dupont.GroupOf(@@Alice)"
        description: "Equivalent to @@Famille_Dupont.ParentOf(@@Alice)"

  - name: ContainedIn
    description: Sugar syntax for ChildOf
    scope: global
    examples:
      - code: "@@Chambre.ContainedIn(@@Maison)"
        description: "Equivalent to @@Chambre.ChildOf(@@Maison)"

  - name: ContainerOf
    description: Sugar syntax for ParentOf
    scope: global
    examples:
      - code: "@@Maison.ContainerOf(@@Chambre)"
        description: "Equivalent to @@Maison.ParentOf(@@Chambre)"

  - name: DescendantOf
    description: Sugar syntax for ChildOf
    scope: global
    examples:
      - code: "@@Alice.DescendantOf(@@Marie)"
        description: "Equivalent to @@Alice.ChildOf(@@Marie)"

  - name: AncestorOf
    description: Sugar syntax for ParentOf
    scope: global
    examples:
      - code: "@@Marie.AncestorOf(@@Alice)"
        description: "Equivalent to @@Marie.ParentOf(@@Alice)"

  - name: Dialog
    description: Marks a passage as a dialogue involving the annotated entity or entities. The parameter is the dialogue text itself, usually provided as a visible parameter in square brackets ([]). When used with entity grouping, all listed entities are considered participants in the dialogue.
    scope: global
    parameters:
      - name: dialogue
        type: string
        description: The text of the dialogue (usually visible, in square brackets)
    examples:
      - code: "@@(Sherlock,Watson).Dialog[--- What do you think about it, dear friend?\n--- I do not know what to think.]"
        description: "Marks a dialogue involving both Sherlock and Watson as participants"

  - name: Voice
    description: Marks a passage as spoken or thought by the annotated entity, with optional expression/context. The visible parameter (in square brackets) is the spoken or thought text; the hidden parameter (in parentheses) can indicate expression, intonation, or context (e.g. 'intrigued', 'thought', 'whispering'). Useful for identifying speech, thoughts, or interior monologue, and for TTS or analysis.
    scope: global
    parameters:
      - name: expression
        type: string
        description: Optional hidden parameter indicating expression, intonation, or context (e.g. 'intrigued', 'thought', 'whispering')
      - name: text
        type: string
        description: The spoken or thought text (visible parameter, in square brackets)
    examples:
      - code: "@@(Holmes).Voice(intrigued)[What is happening here?]"
        description: "Holmes says 'What is happening here?' with an intrigued expression"
